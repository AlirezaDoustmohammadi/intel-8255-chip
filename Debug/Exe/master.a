;
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdio.h>
;// Declare your global variables here
;  char c;
;  char x;
;
;void sender(void);
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 000E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000F     sender();
;PCODE: $0000000F VOL: 0
; 0000 0010 
; 0000 0011 }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0015 {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0016     sender();
;PCODE: $00000015 VOL: 0
; 0000 0017 
; 0000 0018 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;
;
;
;void main(void)
; 0000 001E {
;PCODE: $00000019 VOL: 0
; 0000 001F 
; 0000 0020 
; 0000 0021 // External Interrupt(s) initialization
; 0000 0022 // INT0: On
; 0000 0023 // INT0 Mode: Rising Edge
; 0000 0024 // INT1: on
; 0000 0025 // INT2: Off
; 0000 0026 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0027 MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0028 MCUCSR=(0<<ISC2);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0029 GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002A 
; 0000 002B // Global enable interrupts
; 0000 002C #asm("sei")
;PCODE: $00000023 VOL: 0
	sei
;PCODE: $00000024 VOL: 0
; 0000 002D 
; 0000 002E // Standard Input/Output functions
; 0000 002F 
; 0000 0030 
; 0000 0031 // USART initialization
; 0000 0032 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0033 // USART Receiver: On
; 0000 0034 // USART Transmitter: On
; 0000 0035 // USART Mode: Asynchronous
; 0000 0036 // USART Baud Rate: 4800
; 0000 0037 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0038 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0039 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003A UBRRH=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003B UBRRL=0x0C;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 003C 
; 0000 003D UBRRH=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003E UBRRL=0x0C;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003F UCSRB=0b00011000;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0040 UCSRC=0b10000110;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0041 
; 0000 0042 // Global enable interrupts
; 0000 0043 #asm("sei")
;PCODE: $00000037 VOL: 0
	sei
;PCODE: $00000038 VOL: 0
; 0000 0044 
; 0000 0045  DDRB=0xff;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0046  DDRA=0xff;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0047 
; 0000 0048  DDRD=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0049  PORTD=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 004A 
; 0000 004B // command data
; 0000 004C  PORTB=0xa4;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004D 
; 0000 004E //A0 & A1
; 0000 004F  PORTA.5=1;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0050  PORTA.4=1;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0051 
; 0000 0052 
; 0000 0053 //~wr
; 0000 0054  PORTA.6=1;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0055 
; 0000 0056 
; 0000 0057 sender();
;PCODE: $00000049 VOL: 0
; 0000 0058 
; 0000 0059 while (1)
;PCODE: $0000004A VOL: 0
; 0000 005A       {
; 0000 005B 
; 0000 005C 
; 0000 005D 
; 0000 005E }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005F }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;void sender(void){
; 0000 0061 void sender(void){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0062   putsf(" I/O : ");
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0063     x=getchar();
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0064     putchar(x);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0065     putsf("\n\r");
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0066 
; 0000 0067     putsf(" character : ");
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0068     c=getchar();
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0069     putchar(c);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 006A     putsf("\n\r");
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 006B 
; 0000 006C     PORTB=c;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 006D 
; 0000 006E     if(x=='1'){
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 006F       PORTA.5=0;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0070       PORTA.4=0;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0071 
; 0000 0072     }
; 0000 0073     else if(x=='2'){
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0074       PORTA.5=1;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0075       PORTA.4=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0076 
; 0000 0077     }
; 0000 0078 
; 0000 0079        delay_ms(100);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 007A        PORTA.6=0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 007B        delay_ms(100);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 007C        PORTA.5=1;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 007D        PORTA.4=1;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 007E        PORTB=0xa4;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 007F        PORTA.6=1;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0080        MCUCR=0x02;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0081 
; 0000 0082 
; 0000 0083 }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
